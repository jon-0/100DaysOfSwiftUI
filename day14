// Day 14 - Optionals

let opposites = [
    "Mario": "Wario",
    "Luigi": "Waluigi"
]

// let peachOpposite = opposites["Peach"] // does not exist or it might not be present

// how to handle missing data with optionals


if let peachOpposite = opposites["Peach"] {
    print("Peach's opposite is \(peachOpposite)")
}

var username: String? = nil

if let unwrappedName = username {
    print("We got a user: \(unwrappedName)")
} else {
    print("The optional was empty.")
}

// 
func square(number: Int) -> Int {
    number * number
}

var number: Int? = nil

if let number = number {
    print(square(number: number)) // shadowing - the second/constant of the same name is only available inside the conditions body
    // inside the condition’s body we have an unwrapped value to work with – a real Int rather than an optional Int? – but outside we still have the optional.
}

// ******************
// 2. How to unwrap optionals with guard

// "the opposite of an `if let` optional"
// swift requires you to use return if a guard check fails
// if the check passes, you can use it after the guard code finishes (remains in scope)

func printSquare(of number: Int?) {
    guard let number = number else {
        print("Missing input")
        return
    }

    print("\(number) x \(number) is \(number * number)")
}

/* 
So: use if let to unwrap optionals so you can process them somehow, 
and use guard let to ensure optionals have something inside them and exit otherwise. */

// ******************
// 3. How to unwrap optionals with nil coalescing

// a third way of unwrapping optionals: the nil coalescing operator 
// unwraps the optional, but if nil, provides a default value

let captains = [
    "Enterprise": "Picard",
    "Voyager": "Janeway",
    "Defiant": "Sisko"
]

// let new = captains["Serenity"] // non-existent key 
let new = captains["Serenity"] ?? "N/A"

// not only does the nil coalescing operator work with dictionaries, but it works with any optionals.

// For example, the randomElement() method on arrays returns one random item from the array, 
// but it returns an optional because you might be calling it on an empty array.
// So, we can use nil coalescing to provide a default:

let tvShows = ["Archer", "Babylon 5", "Ted Lasso"]
let favorite = tvShows.randomElement() ?? "None"

// Or perhaps you have a struct with an optional property, and want to provide a sensible default for when it’s missing:

struct Book {
    let title: String
    let author: String?
}

let book = Book(title: "Beowulf", author: nil)
let author = book.author ?? "Anonymous"
print(author)

/*
It’s even useful if you create an integer from a string, 
where you actually get back an optional Int? because the conversion might have failed – 
you might have provided an invalid integer, such as “Hello”. 

Here we can use nil coalescing to provide a default value, like this:
*/ 

let input = ""
let number = Int(input) ?? 0
print(number)

// ******************
// 4. How to handle multiple optionals using optional chaining

let names = ["Arya", "Bran", "Robb", "Sansa"]

let chosen = names.randomElement()?.uppercased() ?? "No one"
print("Next in line: \(chosen)")

// example 2 
struct Book {
    let title: String
    let author: String?
}

var book: Book? = nil
let author = book?.author?.first?.uppercased() ?? "A"
print(author)

// ******************
// 5. How to handle function failure with optionals

enum UserError: Error {
    case badID, networkFailed
}

func getUser(id: Int) throws -> String {
    throw UserError.networkFailed
}

if let user = try? getUser(id: 23) {
    print("User: \(user)")
}

// If you want, you can combine try? with nil coalescing, 
// which means “attempt to get the return value from this function, but if it fails use this default value instead.”

let user = (try? getUser(id: 23)) ?? "Anonymous"
print(user)

/* ****************** 

Summary:

Optionals let us represent the absence of data, which means we’re able to say “this integer has no value” – that’s different from a fixed number such as 0.

As a result, everything that isn’t optional definitely has a value inside, even if that’s just an empty string.

Unwrapping an optional is the process of looking inside a box to see what it contains: if there’s a value inside it’s sent back for use, otherwise there will be nil inside.

We can use if let to run some code if the optional has a value, or guard let to run some code if the optional doesn’t have a value – but with guard we must always exit the function afterwards.

The nil coalescing operator, ??, unwraps and returns an optional’s value, or uses a default value instead.

Optional chaining lets us read an optional inside another optional with a convenient syntax.

If a function might throw errors, you can convert it into an optional using try? – you’ll either get back the function’s return value, or nil if an error is thrown.

*/